概念总结：
简单工厂模式：定义一个工厂类，它可以根据参数的不同返回不同类的实例对象，被创建的实例通常继承自相同的父类或者实现了相同的接口。注意：在该模式中，创建实例的方式是静态方法。

抽象的组成部分为：抽象父类，具体子类，工厂类，三部分组成。

用法总结：
只需要传入正确的参数即可，就能够得到与之对应的对象，使用者因此不用关注创建细节作为拓展功能，在某些场景下，为了节省代码的编译时间及系统运行时策略调整。该模式中factory所接受的参数可由字符串变为配置文件的形式。此方法，建议根据实际情况进行操作。

反思：
应用场景：
需要创建有限个，较少的对象，并且对象数量存在变动的可能。
工厂方法的使用者，完全不关心创建过程。
优点：
工厂类包含有限个判断逻辑，可以随时决定，并修改创建的实例类型。
客户端使用者，移除对象的创建职责。
客户端使用者，完全丢弃对具体产品类型的关注，减少代码耦合度。
缺点：
工厂类包含的逻辑判断，需要极高的稳定性，安全性。否则，整个逻辑处理将会发生错误。
每个具体的产品都会独立成为一个文件，一定程度上增加了代码管理成本。
注意刚刚提及的静态创建方法，由于静态方法不能够被实现为多态。因此，会极大的限制工厂类使用多态扩展的能力。

参考博客:http://blog.csdn.net/ABCD898989/article/details/52789245